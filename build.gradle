import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'

archivesBaseName = 'procyon-quilt'

// quilt says otherwise
ext.getProcyonVersion = { ->
    return "0.5.35"
}

def ENV = System.getenv()
final def procyonVersion = getProcyonVersion() + "." + (ENV.BUILD_NUMBER ?: "local")

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'

    buildDir = rootDir.canonicalPath + "/build/" + rootProject.relativePath(projectDir.canonicalPath)

    version procyonVersion

    group 'dev.quiltmc'
    sourceCompatibility = 1.8    // JDK version

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }
}

//
// The root project is empty and doesn't need any tasks.
//
rootProject.tasks.each { it.enabled = false }
rootProject.tasks.withType(DefaultTask).each { it.enabled = true }
rootProject.uploadArchives.enabled = false

subprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    final boolean shouldSign = "true".equalsIgnoreCase(System.properties.getProperty("procyon.signing.enabled"))

    archivesBaseName = 'procyon-quilt-' + it.name.split("\\.")[1].toLowerCase()

    jar {
        metaInf {
            from 'License.txt'
            from 'README.md'
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug.with {
                events TestLogEvent.STARTED,
                       TestLogEvent.FAILED,
                       TestLogEvent.PASSED,
                       TestLogEvent.SKIPPED,
                       TestLogEvent.STANDARD_ERROR,
                       TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }

            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length() - 2
                    logger.lifecycle('\n' + '+' + ('-' * repeatLength) + '+' + '\n' + startItem + output + endItem + '\n' + '+' + ('-' * repeatLength) + '+')
                }
            }
        }
    }

    if (project.name != "Procyon.Decompiler") {
        javadoc {
            options.encoding = 'UTF-8'
        }

        publishing {
            publications {
                maven(MavenPublication) {
                    groupId project.group
                    artifactId project.archivesBaseName
                    version project.version

                    from components.java

                    artifact javadocJar {
                        classifier "javadoc"
                    }

                    artifact sourcesJar {
                        classifier "sources"
                    }
                }
            }

            repositories {
                if (ENV.MAVEN_URL) {
                    maven {
                        url ENV.MAVEN_URL
                        credentials {
                            username ENV.MAVEN_USERNAME
                            password ENV.MAVEN_PASSWORD
                        }
                    }
                }
            }
        }
    }
}